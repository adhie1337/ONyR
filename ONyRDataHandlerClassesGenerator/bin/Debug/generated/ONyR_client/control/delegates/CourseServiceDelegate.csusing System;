using System;
using System.Net;
using System.ServiceModel;
using System.ServiceModel.Channels;
using ONyR_client.control.business.responders;
using ONyR_client.model;
using ONyR_client.CourseServiceSkeleton;

namespace ONyR_client.control.business.delegates
{
    class CourseServiceDelegate
    {
        private static CourseServiceClient GetClient()
        {
            CourseServiceClient retVal = new CourseServiceClient();
            OperationContextScope scope = new OperationContextScope(retVal.InnerChannel);
            var prop = new HttpRequestMessageProperty();
            prop.Headers.Add(HttpRequestHeader.Cookie, ModelLocator.getInstance().SessionModel.SessionCookie);
            OperationContext.Current.OutgoingMessageProperties[HttpRequestMessageProperty.Name] = prop;

            return retVal;
        }

        private static ONyR_client.model.vo.CourseVO[] Convert(CourseVO[] originals)
        {
            ONyR_client.model.vo.CourseVO[] serialized = new ONyR_client.model.vo.CourseVO[originals.Length];

            for (int i = 0; i < originals.Length; ++i)
            {
                serialized[i] = new model.vo.CourseVO().FillFromSkeleton(originals[i]);
            }

            return serialized;
        }

        public static void LoadCourses(CourseFilter pFilter, int pID = -1, int[] pIDs = null)
        {
            CourseServiceClient client = GetClient();

            try
            {
                CourseVO[] retVal = client.LoadCourses(pFilter, pID, pIDs);
                CourseServiceResponder.LoadCoursesResult(Convert(retVal));
            }
            catch (Exception ex)
            {
                int code;
                ErrorCode errorCode = ErrorCode.NonONyRError;

                try
                {
                    code = System.Convert.ToInt32(ex.Message);
                    errorCode = (ErrorCode)code;
                }
                catch (Exception)
                {
                    // If it was not our Exception, we handle an "Unknown Exception".
                    errorCode = ErrorCode.NonONyRError;
                }

                CourseServiceResponder.LoadCoursesFault(errorCode);
            }
            finally
            {
                client.Close();
            }
        }

        public static void AddCourses(CourseVO[] pCourses)
        {
            CourseServiceClient client = GetClient();

            try
            {
                client.AddCourses(pCourses);
                CourseServiceResponder.AddCoursesResult(Convert(pCourses));
            }
            catch (Exception ex)
            {
                int code;
                ErrorCode errorCode = ErrorCode.NonONyRError;

                try
                {
                    code = System.Convert.ToInt32(ex.Message);
                    errorCode = (ErrorCode)code;
                }
                catch (Exception)
                {
                    // If it was not our Exception, we handle an "Unknown Exception".
                    errorCode = ErrorCode.NonONyRError;
                }

                CourseServiceResponder.LoadCoursesFault(errorCode);
            }
            finally
            {
                client.Close();
            }
        }

        public static void RemoveCourses(CourseVO[] pCourses)
        {
            CourseServiceClient client = GetClient();

            try
            {
                client.RemoveCourses(pCourses);
                CourseServiceResponder.RemoveCoursesResult(Convert(pCourses));
            }
            catch (Exception ex)
            {
                int code;
                ErrorCode errorCode = ErrorCode.NonONyRError;

                try
                {
                    code = System.Convert.ToInt32(ex.Message);
                    errorCode = (ErrorCode)code;
                }
                catch (Exception)
                {
                    // If it was not our Exception, we handle an "Unknown Exception".
                    errorCode = ErrorCode.NonONyRError;
                }

                CourseServiceResponder.LoadCoursesFault(errorCode);
            }
            finally
            {
                client.Close();
            }
        }

        public static void ModifyCourses(CourseVO[] pOriginalCourses, CourseVO[] pNewCourses, bool isForced = false)
        {
            CourseServiceClient client = GetClient();

            try
            {
                client.ModifyCourses(pOriginalCourses, pNewCourses, isForced);
                CourseServiceResponder.ModifyCoursesResult(Convert(pNewCourses));
            }
            catch (Exception ex)
            {
                int code;
                ErrorCode errorCode = ErrorCode.NonONyRError;

                try
                {
                    code = System.Convert.ToInt32(ex.Message);
                    errorCode = (ErrorCode)code;
                }
                catch (Exception)
                {
                    // If it was not our Exception, we handle an "Unknown Exception".
                    errorCode = ErrorCode.NonONyRError;
                }

                CourseServiceResponder.LoadCoursesFault(errorCode);
            }
            finally
            {
                client.Close();
            }
        }
    }
}
