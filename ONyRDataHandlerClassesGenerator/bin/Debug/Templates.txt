//@templatename:Service file
//@directory:ONyRServiceSite\
//@filename:<<EntityType>>Service.svc
<%@ ServiceHost Language="C#" Debug="true" Service="<<EntityType>>Service" CodeBehind="~/App_Code/<<EntityType>>Service.cs" %>
//@templatename:Data Contract Interface
//@directory:ONyRServiceSite\App_Code\Interfaces
//@filename:I<<EntityType>>Service.cs
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.ServiceModel;

public enum <<EntityType>>Filter
{
    ById = 0, ByIds, All
};

[ServiceContract]
public interface I<<EntityType>>Service
{
    [OperationContract]
    [FaultContractAttribute(typeof(ONyRFaultException))]
    List<<<EntityType>>VO> Load<<EntityTypePlural>>(<<EntityType>>Filter pFilter, int pId = -1, int[] pIds = null);

    [OperationContract]
    [FaultContractAttribute(typeof(ONyRFaultException))]
    List<<<EntityType>>VO> Add<<EntityTypePlural>>(<<EntityType>>VO[] p<<EntityTypePlural>>);

    [OperationContract]
    [FaultContractAttribute(typeof(ONyRFaultException))]
    List<<<EntityType>>VO> Remove<<EntityTypePlural>>(<<EntityType>>VO[] p<<EntityTypePlural>>);

    [OperationContract]
    [FaultContractAttribute(typeof(ONyRFaultException))]
    List<<<EntityType>>VO> Modify<<EntityTypePlural>>(<<EntityType>>VO[] pOriginal<<EntityTypePlural>>, <<EntityType>>VO[] pNew<<EntityTypePlural>>, bool isForced = false);
}

[DataContract]
public class <<EntityType>>VO
{
    [DataMember]
    public int ID;

	// TODO: Fill the properties
    /*
	[DataMember]
    public string Name;
	*/
    
    public <<EntityType>>VO()
    {
    }

    public <<EntityType>>VO(int pID/*, string pName*/)
    {
        ID = pID;
        /*
		Name = pName;
		*/
    }

    public bool Equals(<<EntityType>>VO obj)
    {
        return ID == obj.ID
			/*
            && Name == obj.Name
			*/
			;
    }
}
//@templatename:Sevice class
//@directory:ONyRServiceSite\App_Code
//@filename:<<EntityType>>Service.cs
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Linq;
using System.ServiceModel;
using System.ServiceModel.Activation;
using ONyRDataSetTableAdapters;

[AspNetCompatibilityRequirements(RequirementsMode = AspNetCompatibilityRequirementsMode.Required)]
public class <<EntityType>>Service : I<<EntityType>>Service
{
    public List<<<EntityType>>VO> Load<<EntityTypePlural>>(<<EntityType>>Filter pFilter, int pId = -1, int[] pIds = null)
    {
        List<<<EntityType>>VO> result = null;
        try
        {
            AuthenticationService.CheckIfUSerIsAuthenticated();
            LogService.Log("<<EntityType>>Service", "Load<<EntityTypePlural>>", String.Format("Filter:{0}; ID:{1}; IDs: {2}", pFilter, pId, pIds));

            <<DataTableName>>TableAdapter adapter = new <<DataTableName>>TableAdapter();
            ONyRDataSet.<<DataTableName>>DataTable table;
            result = new List<<<EntityType>>VO>();


            if (pFilter == <<EntityType>>Filter.All)
            {
                table = adapter.GetData();

            }
            else if (pFilter == <<EntityType>>Filter.ById)
            {
                table = adapter.GetDataByID(pId);
            }
            else if (pFilter == <<EntityType>>Filter.ByIds)
            {
                table = adapter.GetData();
            }
            else
            {
                throw new ONyRException(ErrorCode.UnknownError);
            }

            for (int i = 0; i < table.Count; ++i)
            {
                if (pFilter != <<EntityType>>Filter.ByIds || pIds.Contains(table[i].ID))
                {
				   // TODO: Fill properties here
				   // TODO: try-catch block for every Nullable field!
                    result.Add(new <<EntityType>>VO(table[i].ID, table[i].Name));
                }
            }

            adapter.Dispose();
        }
        catch (ONyRException e)
        {
            LogService.LogError(e.ErrorCode, e.StackTrace);
            throw new FaultException<ONyRFaultException>(new ONyRFaultException((int)e.ErrorCode));
        }
        catch (SqlException ex)
        {
            string s = "Class: " + ex.Class + "\n";
            for (int i = 0; i < ex.Errors.Count; i++)
            {
                s += "Index #" + i + "\n" +
                    "Message: " + ex.Errors[i].Message + "\n" +
                    "LineNumber: " + ex.Errors[i].LineNumber + "\n" +
                    "Source: " + ex.Errors[i].Source + "\n" +
                    "Procedure: " + ex.Errors[i].Procedure + "\n" +
                    "Class: " + ex.Errors[i].Class + "\n";
            }
            LogService.LogError(ErrorCode.UnknownError, null, s);
            throw new FaultException<ONyRFaultException>(new ONyRFaultException((int)ErrorCode.DatabaseError));
        }
        catch (Exception e)
        {
            LogService.LogError(ErrorCode.UnknownError, e.StackTrace, e.Message);
            throw new FaultException<ONyRFaultException>(new ONyRFaultException((int)ErrorCode.UnknownError));
        }


        return result;
    }

    public List<<<EntityType>>VO> Add<<EntityTypePlural>>(<<EntityType>>VO[] p<<EntityTypePlural>>)
    {
        List<<<EntityType>>VO> result = new List<<<EntityType>>VO>();
        try
        {
            AuthenticationService.CheckIfUSerIsAuthenticated();
            <<DataTableName>>TableAdapter adapter = new <<DataTableName>>TableAdapter();
            string logParams = "";

            foreach (<<EntityType>>VO vo in p<<EntityTypePlural>>)
            {
                if (logParams.Length > 0)
                {
                    logParams += ",\n";
                }

                // TODO: Fill properties here & Create "Smart Insert Stored Procedure in the dataset!
                vo.ID = (int)adapter.SmartInsert(vo.Name);
                result.Add(vo);

                // TODO: Fill properties here
                logParams += String.Format("Name:\"{0}\"", vo.Name);
            }

            adapter.Dispose();

            LogService.Log("<<EntityType>>Service", "Add<<EntityTypePlural>>", logParams);
        }
        catch (ONyRException e)
        {
            LogService.LogError(e.ErrorCode,  e.StackTrace);
            throw new FaultException<ONyRFaultException>(new ONyRFaultException((int)e.ErrorCode));
        }
        catch (SqlException ex)
        {
            string s = "Class: " + ex.Class + "\n";
            for (int i = 0; i < ex.Errors.Count; i++)
            {
                s += "Index #" + i + "\n" +
                    "Message: " + ex.Errors[i].Message + "\n" +
                    "LineNumber: " + ex.Errors[i].LineNumber + "\n" +
                    "Source: " + ex.Errors[i].Source + "\n" +
                    "Procedure: " + ex.Errors[i].Procedure + "\n" +
                    "Class: " + ex.Errors[i].Class + "\n";
            }
            LogService.LogError(ErrorCode.UnknownError, null, s);
            throw new FaultException<ONyRFaultException>(new ONyRFaultException((int)ErrorCode.DatabaseError));
        }
        catch (Exception e)
        {
            LogService.LogError(ErrorCode.UnknownError, e.StackTrace, e.Message);
            throw new FaultException<ONyRFaultException>(new ONyRFaultException((int)ErrorCode.UnknownError));
        }

        return result;
    }

    public List<<<EntityType>>VO> Remove<<EntityTypePlural>>(<<EntityType>>VO[] p<<EntityTypePlural>>)
    {
		List<<<EntityType>>VO> result = null;
        try
        {
            AuthenticationService.CheckIfUSerIsAuthenticated();
            <<DataTableName>>TableAdapter adapter = new <<DataTableName>>TableAdapter();
            string logParams = "";

            foreach (<<EntityType>>VO vo in p<<EntityTypePlural>>)
            {
                if (logParams.Length > 0)
                {
                    logParams += ",\n";
                }

                adapter.Delete(vo.ID);
				result.Add(vo);

                // TODO: Fill properties here
                logParams += String.Format("ID:\"{1}\", Name:\"{1}\"", vo.ID, vo.Name);
            }

            adapter.Dispose();

            LogService.Log("<<EntityType>>Service", "Remove<<EntityTypePlural>>", logParams);
        }
        catch (ONyRException e)
        {
            LogService.LogError(e.ErrorCode, e.StackTrace);
            throw new FaultException<ONyRFaultException>(new ONyRFaultException((int)e.ErrorCode));
        }
        catch (SqlException ex)
        {
            string s = "Class: " + ex.Class + "\n";
            for (int i = 0; i < ex.Errors.Count; i++)
            {
                s += "Index #" + i + "\n" +
                    "Message: " + ex.Errors[i].Message + "\n" +
                    "LineNumber: " + ex.Errors[i].LineNumber + "\n" +
                    "Source: " + ex.Errors[i].Source + "\n" +
                    "Procedure: " + ex.Errors[i].Procedure + "\n" +
                    "Class: " + ex.Errors[i].Class + "\n";
            }
            LogService.LogError(ErrorCode.UnknownError, null, s);
            throw new FaultException<ONyRFaultException>(new ONyRFaultException((int)ErrorCode.DatabaseError));
        }
        catch (Exception e)
        {
            LogService.LogError(ErrorCode.UnknownError, e.StackTrace, e.Message);
            throw new FaultException<ONyRFaultException>(new ONyRFaultException((int)ErrorCode.UnknownError));
        }

		return result;
    }

    public List<<<EntityType>>VO> Modify<<EntityTypePlural>>(<<EntityType>>VO[] pOriginal<<EntityTypePlural>>, <<EntityType>>VO[] pNew<<EntityTypePlural>>, bool isForced = false)
    {
		List<<<EntityType>>VO> result = new List<<<EntityType>>VO>();
        try
        {
            AuthenticationService.CheckIfUSerIsAuthenticated();
            <<DataTableName>>TableAdapter adapter = new <<DataTableName>>TableAdapter();
            string logParams = "";
            bool modifyConflict = false;

            for (int i = 0; i < Math.Min(pOriginal<<EntityTypePlural>>.Length, pNew<<EntityTypePlural>>.Length); ++i)
            {
                ONyRDataSet.<<DataTableName>>Row row = adapter.GetDataByID(pNew<<EntityTypePlural>>[i].ID)[0];
                // TODO: Fill properties here
				// TODO: Watch out for null values!

                <<EntityType>>VO vo = new <<EntityType>>VO(row.ID);

                if (vo.Equals(pOriginal<<EntityTypePlural>>[i]) || isForced)
                {
                    if (logParams.Length > 0)
                    {
                        logParams += ",\n";
                    }

					result.Add(vo);

                    // TODO: Fill properties here
                    adapter.Update(pNew<<EntityTypePlural>>[i].Name, vo.ID);
                    logParams += String.Format("Name:\"{0}\" => \"{1}\"", vo.Name, pNew<<EntityTypePlural>>[i].Name);
                }
                else
                {
                    modifyConflict = true;
                }
            }

            adapter.Dispose();

            LogService.Log("<<EntityType>>Service", "Modify<<EntityTypePlural>>", logParams);
			
            if (modifyConflict)
            {
                throw new ONyRException(ErrorCode.ModifyConflict);
            }
        }
        catch (ONyRException e)
        {
            LogService.LogError(e.ErrorCode, e.StackTrace);
            throw new FaultException<ONyRFaultException>(new ONyRFaultException((int)e.ErrorCode));
        }
        catch (SqlException ex)
        {
            string s = "Class: " + ex.Class + "\n";
            for (int i = 0; i < ex.Errors.Count; i++)
            {
                s += "Index #" + i + "\n" +
                    "Message: " + ex.Errors[i].Message + "\n" +
                    "LineNumber: " + ex.Errors[i].LineNumber + "\n" +
                    "Source: " + ex.Errors[i].Source + "\n" +
                    "Procedure: " + ex.Errors[i].Procedure + "\n" +
                    "Class: " + ex.Errors[i].Class + "\n";
            }
            LogService.LogError(ErrorCode.UnknownError, null, s);
            throw new FaultException<ONyRFaultException>(new ONyRFaultException((int)ErrorCode.DatabaseError));
        }
        catch (Exception e)
        {
            LogService.LogError(ErrorCode.UnknownError, e.StackTrace, e.Message);
            throw new FaultException<ONyRFaultException>(new ONyRFaultException((int)ErrorCode.UnknownError));
        }

		return result;
    }
}
//@templatename:Value Object class
//@directory:ONyR_client\model\vo
//@filename:<<EntityType>>VO.cs
namespace ONyR_client.model.vo
{
    public class <<EntityType>>VO : <<EntityType>>ServiceReference.<<EntityType>>VO, IValueObject<<<EntityType>>VO>
    {
        public <<EntityType>>VO Clone()
        {
            return new <<EntityType>>VO().FillFromServiceReference(this);
        }

        public <<EntityType>>VO FillFromServiceReference(object pReference)
        {
            <<EntityType>>ServiceReference.<<EntityType>>VO other = (<<EntityType>>ServiceReference.<<EntityType>>VO)pReference;

            // TODO: Fill properties here
            ID = other.ID;

            return this;
        }

        private VOStateManager mStateManager;

        private VOStateManager StateManager
        {
            get
            {
                if (mStateManager == null)
                {
            // TODO: Fill properties here
                    mStateManager = new VOStateManager(new string[] { "ID" }, this);
                }
                return mStateManager;
            }
        }

        public VOState GetState()
        {
            return StateManager.GetState();
        }

        public void SetState(VOState pState)
        {
            StateManager.SetState(pState);
        }

        public void StoreState()
        {
            StateManager.StoreState();
        }

        public void RestoreState()
        {
            StateManager.RestoreState();
        }

        public bool StateIsEqualTo(VOState pState)
        {
            return StateManager.StateIsEqualTo(pState);
        }
    }
}
//@templatename:Model class
//@directory:ONyR_client\model\models
//@filename:<<EntityType>>Model.cs
using System.Collections.Generic;
using System.Linq;
using ONyR_client.model.vo;

namespace ONyR_client.model.models
{
    public class <<EntityType>>Model : Model
    {

        #region Members

        private Dictionary<int, <<EntityType>>VO> m<<EntityTypePlural>>;

        #endregion

        #region Constructor

        public <<EntityType>>Model()
        {
            m<<EntityTypePlural>> = new Dictionary<int, <<EntityType>>VO>();
        }

        #endregion

        #region Queries

        public <<EntityType>>VO Get<<EntityType>>ByID(int pID)
        {
            return m<<EntityTypePlural>>[pID].Clone();
        }

        public List<<<EntityType>>VO> Get<<EntityTypePlural>>ByIDs(int[] pIDs)
        {
            List<<<EntityType>>VO> result = new List<<<EntityType>>VO>();

            int[] keys = m<<EntityTypePlural>>.Keys.ToArray();

            for (int i = 0; i < pIDs.Count(); ++i)
            {
                if (keys.Contains(pIDs[i]))
                {
                    result.Add(m<<EntityTypePlural>>[pIDs[i]].Clone());
                }
            }

            return result;
        }

        public List<<<EntityType>>VO> GetAll<<EntityTypePlural>>()
        {
            List<<<EntityType>>VO> result = new List<<<EntityType>>VO>();

            int[] keys = m<<EntityTypePlural>>.Keys.ToArray();

            for (int i = 0; i < keys.Count(); ++i)
            {
                result.Add(m<<EntityTypePlural>>[keys[i]].Clone());
            }

            return result;
        }

        #endregion

        #region Model manipulation

        public void Add<<EntityType>>(<<EntityType>>VO p<<EntityType>>)
        {
            m<<EntityTypePlural>>[p<<EntityType>>.ID] = p<<EntityType>>;
            update();
        }

        public void Add<<EntityTypePlural>>(<<EntityType>>VO[] p<<EntityTypePlural>>)
        {
            foreach (<<EntityType>>VO vo in p<<EntityTypePlural>>)
            {
                m<<EntityTypePlural>>[vo.ID] = vo.Clone();
            }

            update();
        }

        public void Remove<<EntityType>>ByID(int pID)
        {
            m<<EntityTypePlural>>.Remove(pID);
        }

        public void Remove<<EntityTypePlural>>ByIDs(int[] pIDs)
        {
            for (int i = 0; i < pIDs.Count(); ++i)
            {
                m<<EntityTypePlural>>.Remove(pIDs[i]);
            }
            update();
        }

        public void Modify<<EntityType>>(<<EntityType>>VO p<<EntityType>>)
        {
            Add<<EntityType>>(p<<EntityType>>);
        }

        public void Modify<<EntityTypePlural>>(<<EntityType>>VO[] p<<EntityTypePlural>>)
        {
            Add<<EntityTypePlural>>(p<<EntityTypePlural>>);
        }


        public void Empty()
        {
            int[] keys = m<<EntityTypePlural>>.Keys.ToArray();

            for (int i = 0; i < keys.Count(); ++i)
            {
                m<<EntityTypePlural>>.Remove(keys[i]);
            }

            update();
        }

        #endregion
    }
}
//@templatename:Delegate class
//@directory:ONyR_client\control\business\delegates
//@filename:<<EntityType>>ServiceDelegate.cs
using System;
using System.Net;
using System.ServiceModel;
using System.ServiceModel.Channels;
using ONyR_client.control.business.responders;
using ONyR_client.model;
using ONyR_client.<<EntityType>>ServiceReference;

namespace ONyR_client.control.business.delegates
{
    class <<EntityType>>ServiceDelegate : Delegate<<<EntityType>>ServiceResponder>
    {
        public <<EntityType>>ServiceDelegate(Notifier pInitiator, <<EntityType>>ServiceResponder responder)
            : base(pInitiator, responder)
        {
            responder.Initiator = pInitiator;
        }

        private <<EntityType>>ServiceClient GetClient()
        {
            <<EntityType>>ServiceClient result = new <<EntityType>>ServiceClient();
            OperationContextScope scope = new OperationContextScope(result.InnerChannel);
            var prop = new HttpRequestMessageProperty();
            prop.Headers.Add(HttpRequestHeader.Cookie, ModelLocator.getInstance().SessionModel.SessionCookie);
            OperationContext.Current.OutgoingMessageProperties[HttpRequestMessageProperty.Name] = prop;

            return result;
        }

        private <<EntityType>>VO[] ConvertToServer(<<EntityType>>VO[] originals)
        {
            <<EntityType>>VO[] serialized = new <<EntityType>>VO[originals.Length];

            for (int i = 0; i < originals.Length; ++i)
            {
                // TODO: Fill properties here
                serialized[i] = new <<EntityType>>VO();
                serialized[i].ID = originals[i].ID;
            }

            return serialized;
        }

        public void Load<<EntityTypePlural>>(<<EntityType>>Filter pFilter, int pID = -1, int[] pIDs = null)
        {
            <<EntityType>>ServiceClient client = GetClient();

            try
            {
                ModelLocator.getInstance().SessionModel.NotifyOneOperationBegin();
                client.Load<<EntityTypePlural>>Completed += new EventHandler<Load<<EntityTypePlural>>CompletedEventArgs>(mResponder.Load<<EntityTypePlural>>Result);
                client.Load<<EntityTypePlural>>Async(pFilter, pID, pIDs);
            }
            catch (FaultException<ONyRFaultException> ex)
            {
                mResponder.Load<<EntityTypePlural>>Fault((ErrorCode)ex.Detail.ErrorCode);
            }
            catch (Exception)
            {
                mResponder.Load<<EntityTypePlural>>Fault(ErrorCode.NonONyRError);
            }
            finally
            {
                client.Close();
            }
        }

        public void Add<<EntityTypePlural>>(<<EntityType>>VO[] p<<EntityTypePlural>>)
        {
            <<EntityType>>ServiceClient client = GetClient();

            try
            {
                ModelLocator.getInstance().SessionModel.NotifyOneOperationBegin();
                client.Add<<EntityTypePlural>>Completed += new EventHandler<Add<<EntityTypePlural>>CompletedEventArgs>(mResponder.Add<<EntityTypePlural>>Result);
                client.Add<<EntityTypePlural>>Async(ConvertToServer(p<<EntityTypePlural>>));
            }
            catch (FaultException<ONyRFaultException> ex)
            {
                mResponder.Add<<EntityTypePlural>>Fault((ErrorCode)ex.Detail.ErrorCode);
            }
            catch (Exception e)
            {
                mResponder.Add<<EntityTypePlural>>Fault(ErrorCode.NonONyRError);
            }
            finally
            {
                client.Close();
            }
        }

        public void Remove<<EntityTypePlural>>(<<EntityType>>VO[] p<<EntityTypePlural>>)
        {
            <<EntityType>>ServiceClient client = GetClient();

            try
            {
                ModelLocator.getInstance().SessionModel.NotifyOneOperationBegin();
                client.Remove<<EntityTypePlural>>Completed += new EventHandler<Remove<<EntityTypePlural>>CompletedEventArgs>(mResponder.Remove<<EntityTypePlural>>Result);
                client.Remove<<EntityTypePlural>>Async(ConvertToServer(p<<EntityTypePlural>>));
            }
            catch (FaultException<ONyRFaultException> ex)
            {
                mResponder.Remove<<EntityTypePlural>>Fault((ErrorCode)ex.Detail.ErrorCode);
            }
            catch (Exception)
            {
                mResponder.Remove<<EntityTypePlural>>Fault(ErrorCode.NonONyRError);
            }
            finally
            {
                client.Close();
            }
        }

        public void Modify<<EntityTypePlural>>(<<EntityType>>VO[] pOriginal<<EntityTypePlural>>, <<EntityType>>VO[] pNew<<EntityTypePlural>>, bool isForced = false)
        {
            <<EntityType>>ServiceClient client = GetClient();

            try
            {
                ModelLocator.getInstance().SessionModel.NotifyOneOperationBegin();
                client.Modify<<EntityTypePlural>>Completed += new EventHandler<Modify<<EntityTypePlural>>CompletedEventArgs>(mResponder.Modify<<EntityTypePlural>>Result);
                client.Modify<<EntityTypePlural>>Async(ConvertToServer(pOriginal<<EntityTypePlural>>), ConvertToServer(pNew<<EntityTypePlural>>), isForced);
            }
            catch (FaultException<ONyRFaultException> ex)
            {
                mResponder.Modify<<EntityTypePlural>>Fault((ErrorCode)ex.Detail.ErrorCode);
            }
            catch (Exception)
            {
                mResponder.Modify<<EntityTypePlural>>Fault(ErrorCode.NonONyRError);
            }
            finally
            {
                client.Close();
            }
        }
    }
}
//@templatename:Responder class
//@directory:ONyR_client\control\business\responders
//@filename:<<EntityType>>ServiceResponder.cs
using ONyR_client.model;
using ONyR_client.model.vo;
using ONyR_client.<<EntityType>>ServiceReference;

namespace ONyR_client.control.business.responders
{
    class <<EntityType>>ServiceResponder : Responder
    {

        private ONyR_client.model.vo.<<EntityType>>VO[] Convert(ONyR_client.<<EntityType>>ServiceReference.<<EntityType>>VO[] originals)
        {
            ONyR_client.model.vo.<<EntityType>>VO[] serialized = new ONyR_client.model.vo.<<EntityType>>VO[originals.Length];

            for (int i = 0; i < originals.Length; ++i)
            {
                serialized[i] = new model.vo.<<EntityType>>VO().FillFromServiceReference(originals[i]);
            }

            return serialized;
        }

        public void Load<<EntityTypePlural>>Result(object sender, Load<<EntityTypePlural>>CompletedEventArgs e)
        {
			ONyR_client.model.vo.<<EntityType>>VO[] loaded<<EntityTypePlural>> = Convert(e.Result);
            ModelLocator.getInstance().SessionModel.NotifyOneOperationDone();
            ModelLocator.getInstance().<<EntityType>>Model.Add<<EntityTypePlural>>(loaded<<EntityTypePlural>>);
        }

        public void Load<<EntityTypePlural>>Fault(ErrorCode pCode)
        {
            ModelLocator.getInstance().SessionModel.NotifyOneOperationDone();
            ApplicationFaultManager.Fault(pCode, Initiator);
        }

        public void Add<<EntityTypePlural>>Result(object sender, Add<<EntityTypePlural>>CompletedEventArgs e)
        {
			ONyR_client.model.vo.<<EntityType>>VO[] added<<EntityTypePlural>> = Convert(e.Result);
            ModelLocator.getInstance().SessionModel.NotifyOneOperationDone();
            ModelLocator.getInstance().<<EntityType>>Model.Add<<EntityTypePlural>>(added<<EntityTypePlural>>);
        }

        public void Add<<EntityTypePlural>>Fault(ErrorCode pCode)
        {
            ModelLocator.getInstance().SessionModel.NotifyOneOperationDone();
            ApplicationFaultManager.Fault(pCode, Initiator);
        }

        public void Remove<<EntityTypePlural>>Result(object sender, Remove<<EntityTypePlural>>CompletedEventArgs e)
        {
			ONyR_client.model.vo.<<EntityType>>VO[] removed<<EntityTypePlural>> = Convert(e.Result);
            ModelLocator.getInstance().SessionModel.NotifyOneOperationDone();
            ModelLocator locator = ModelLocator.getInstance();
            int[] ids = new int[removed<<EntityTypePlural>>.Length];

            for (int i = 0; i < removed<<EntityTypePlural>>.Length; ++i)
            {
                ids[i] = removed<<EntityTypePlural>>[i].ID;
            }

            locator.<<EntityType>>Model.Remove<<EntityTypePlural>>ByIDs(ids);
        }

        public void Remove<<EntityTypePlural>>Fault(ErrorCode pCode)
        {
            ModelLocator.getInstance().SessionModel.NotifyOneOperationDone();
            ApplicationFaultManager.Fault(pCode, Initiator);
        }

        public void Modify<<EntityTypePlural>>Result(object sender, Modify<<EntityTypePlural>>CompletedEventArgs e)
        {
			ONyR_client.model.vo.<<EntityType>>VO[] new<<EntityTypePlural>> = Convert(e.Result);
            ModelLocator.getInstance().SessionModel.NotifyOneOperationDone();
            ModelLocator.getInstance().<<EntityType>>Model.Modify<<EntityTypePlural>>(new<<EntityTypePlural>>);
        }

        public void Modify<<EntityTypePlural>>Fault(ErrorCode pCode)
        {
            ModelLocator.getInstance().SessionModel.NotifyOneOperationDone();
            ApplicationFaultManager.Fault(pCode, Initiator);
        }

    }
}
//@templatename:Controller class
//@directory:ONyR_client\control
//@filename:<<EntityType>>Controller.cs
using ONyR_client.control.notifiers.<<EntityType>>;
using ONyR_client.control.commands.<<EntityType>>;

namespace ONyR_client.control
{
    class <<EntityType>>Controller : FrontController
    {
        override protected void Initialize()
        {
            addConnection(typeof(Load<<EntityTypePlural>>Notifier), typeof(Load<<EntityTypePlural>>Command));
            addConnection(typeof(Add<<EntityTypePlural>>Notifier), typeof(Add<<EntityTypePlural>>Command));
            addConnection(typeof(Modify<<EntityTypePlural>>Notifier), typeof(Modify<<EntityTypePlural>>Command));
            addConnection(typeof(Remove<<EntityTypePlural>>Notifier), typeof(Remove<<EntityTypePlural>>Command));
        }
    }
}
//@templatename:Load notifier class
//@directory:ONyR_client\control\notifiers\<<EntityType>>
//@filename:Load<<EntityTypePlural>>Notifier.cs
namespace ONyR_client.control.notifiers.<<EntityType>>
{
    public enum <<EntityType>>Filter
    {
		// TODO: Change this
        ById=0, ByIds, All
    }

    class Load<<EntityTypePlural>>Notifier : Notifier
    {

        public Load<<EntityTypePlural>>Notifier(<<EntityType>>Filter pFilter, int pId = -1, int[] pIds = null)
        {
            mFilter = pFilter;
            mId = pId;
            mIds = pIds;
        }

        private <<EntityType>>Filter mFilter;
        private int mId;
        private int[] mIds;

        public <<EntityType>>Filter Filter
        {
            get
            {
                return mFilter;
            }
        }

        public int Id
        {
            get
            {
                if (mFilter == <<EntityType>>Filter.ById)
                {
                    return mId;
                }

                return -1;
            }
        }

        public int[] Ids
        {
            get
            {
                if (mFilter == <<EntityType>>Filter.ByIds)
                {
                    return mIds;
                }

                return null;
            }
        }


        override public object Clone()
        {
            return new Load<<EntityTypePlural>>Notifier(mFilter, mId, mIds);
        }
    }
}
//@templatename:Add notifier class
//@directory:ONyR_client\control\notifiers\<<EntityType>>
//@filename:Add<<EntityTypePlural>>Notifier.cs
using ONyR_client.model.vo;

namespace ONyR_client.control.notifiers.<<EntityType>>
{
    class Add<<EntityTypePlural>>Notifier : Notifier
    {
        public Add<<EntityTypePlural>>Notifier(<<EntityType>>VO[] p<<EntityTypePlural>>)
        {
            m<<EntityTypePlural>> = p<<EntityTypePlural>>;
        }

        private <<EntityType>>VO[] m<<EntityTypePlural>>;

        public <<EntityType>>VO[] <<EntityTypePlural>>
        {
            get
            {
                return m<<EntityTypePlural>>;
            }
        }

        override public object Clone()
        {
            return new Add<<EntityTypePlural>>Notifier(m<<EntityTypePlural>>);
        }
    }
}
//@templatename:Modify notifier class
//@directory:ONyR_client\control\notifiers\<<EntityType>>
//@filename:Modify<<EntityTypePlural>>Notifier.cs
using ONyR_client.model.vo;

namespace ONyR_client.control.notifiers.<<EntityType>>
{
    class Modify<<EntityTypePlural>>Notifier : Notifier
    {
        private <<EntityType>>VO[] mOriginal<<EntityTypePlural>>;

        private <<EntityType>>VO[] mModified<<EntityTypePlural>>;

        public Modify<<EntityTypePlural>>Notifier(<<EntityType>>VO[] pOriginal<<EntityTypePlural>>, <<EntityType>>VO[] pModified<<EntityTypePlural>>)
        {
            mOriginal<<EntityTypePlural>> = pOriginal<<EntityTypePlural>>;
            mModified<<EntityTypePlural>> = pModified<<EntityTypePlural>>;
        }

        public <<EntityType>>VO[] Original<<EntityTypePlural>>
        {
            get
            {
                return mOriginal<<EntityTypePlural>>;
            }
        }

        public <<EntityType>>VO[] Modified<<EntityTypePlural>>
        {
            get
            {
                return mModified<<EntityTypePlural>>;
            }
        }

        public override object Clone()
        {
            return new Modify<<EntityTypePlural>>Notifier(mOriginal<<EntityTypePlural>>, mModified<<EntityTypePlural>>);
        }
    }
}
//@templatename:Remove notifier class
//@directory:ONyR_client\control\notifiers\<<EntityType>>
//@filename:Remove<<EntityTypePlural>>Notifier.cs
using ONyR_client.model.vo;

namespace ONyR_client.control.notifiers.<<EntityType>>
{
    class Remove<<EntityTypePlural>>Notifier : Notifier
    {
        public Remove<<EntityTypePlural>>Notifier(<<EntityType>>VO[] p<<EntityTypePlural>>)
        {
            m<<EntityTypePlural>> = p<<EntityTypePlural>>;
        }

        private <<EntityType>>VO[] m<<EntityTypePlural>>;

        public <<EntityType>>VO[] <<EntityTypePlural>>
        {
            get
            {
                return m<<EntityTypePlural>>;
            }
        }

        public override object Clone()
        {
            return new Add<<EntityTypePlural>>Notifier(m<<EntityTypePlural>>);
        }
    }
}
//@templatename:Load command class
//@directory:ONyR_client\control\commands\<<EntityType>>
//@filename:Load<<EntityTypePlural>>Command.cs
using ONyR_client.control.business.delegates;
using ONyR_client.control.business.responders;
using ONyR_client.control.notifiers.<<EntityType>>;

namespace ONyR_client.control.commands.<<EntityType>>
{
    class Load<<EntityTypePlural>>Command : Command<Load<<EntityTypePlural>>Notifier>
    {
        override protected void execute(Load<<EntityTypePlural>>Notifier pLoad<<EntityTypePlural>>Notifier)
        {
            new <<EntityType>>ServiceDelegate(
                pLoad<<EntityTypePlural>>Notifier,
                new <<EntityType>>ServiceResponder()
            ).Load<<EntityTypePlural>>((<<EntityType>>ServiceReference.<<EntityType>>Filter)pLoad<<EntityTypePlural>>Notifier.Filter, pLoad<<EntityTypePlural>>Notifier.Id, pLoad<<EntityTypePlural>>Notifier.Ids);
        }
    }
}
//@templatename:Add command class
//@directory:ONyR_client\control\commands\<<EntityType>>
//@filename:Add<<EntityTypePlural>>Command.cs
using ONyR_client.control.business.delegates;
using ONyR_client.control.business.responders;
using ONyR_client.control.notifiers.<<EntityType>>;

namespace ONyR_client.control.commands.<<EntityType>>
{
    class Add<<EntityTypePlural>>Command : Command<Add<<EntityTypePlural>>Notifier>
    {
        override protected void execute(Add<<EntityTypePlural>>Notifier pAdd<<EntityTypePlural>>Notifier)
        {
            new <<EntityType>>ServiceDelegate(
                    pAdd<<EntityTypePlural>>Notifier,
                    new <<EntityType>>ServiceResponder()
                ).Add<<EntityTypePlural>>(pAdd<<EntityTypePlural>>Notifier.<<EntityTypePlural>>);
        }
    }
}
//@templatename:Modify command class
//@directory:ONyR_client\control\commands\<<EntityType>>
//@filename:Modify<<EntityTypePlural>>Command.cs
using ONyR_client.control.business.delegates;
using ONyR_client.control.business.responders;
using ONyR_client.control.notifiers.<<EntityType>>;

namespace ONyR_client.control.commands.<<EntityType>>
{
    class Modify<<EntityTypePlural>>Command : Command<Modify<<EntityTypePlural>>Notifier>
    {
        override protected void execute(Modify<<EntityTypePlural>>Notifier pModify<<EntityTypePlural>>Notifier)
        {
            new <<EntityType>>ServiceDelegate(
                    pModify<<EntityTypePlural>>Notifier,
                    new <<EntityType>>ServiceResponder()
                ).Modify<<EntityTypePlural>>(pModify<<EntityTypePlural>>Notifier.Original<<EntityTypePlural>>, pModify<<EntityTypePlural>>Notifier.Modified<<EntityTypePlural>>, pModify<<EntityTypePlural>>Notifier.isForced);
        }
    }
}
//@templatename:Remove command class
//@directory:ONyR_client\control\commands\<<EntityType>>
//@filename:Remove<<EntityTypePlural>>Command.cs
using ONyR_client.control.business.delegates;
using ONyR_client.control.business.responders;
using ONyR_client.control.notifiers.<<EntityType>>;

namespace ONyR_client.control.commands.<<EntityType>>
{
    class Remove<<EntityTypePlural>>Command : Command<Remove<<EntityTypePlural>>Notifier>
    {
        override protected void execute(Remove<<EntityTypePlural>>Notifier pRemove<<EntityTypePlural>>Notifier)
        {
            new <<EntityType>>ServiceDelegate(
                    pRemove<<EntityTypePlural>>Notifier,
                    new <<EntityType>>ServiceResponder()
                ).Remove<<EntityTypePlural>>(pRemove<<EntityTypePlural>>Notifier.<<EntityTypePlural>>);
        }
    }
}